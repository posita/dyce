from dyce import H
from dyce.h import resolve_dependent_probability

from time import sleep
def dependent_term(
  outcome_1,
  outcome_2,
  outcome_3,
  outcome_n,
):
  import math ; math.gcd(456**123, 123**456)  # emulate an expensive calculation
  return (
    (outcome_1 == outcome_2) +
    (outcome_2 == outcome_3) +
    (outcome_1 == outcome_3) +
    (
      outcome_n > outcome_1
      and outcome_n > outcome_2
      and outcome_n > outcome_3
    )
  )

source_1 = H(6)
source_2 = H(8)
source_3 = H(10)
source_n = H(20)

def sub_source_1(__, outcome_1):
  def sub_source_2(__, outcome_2):
    def sub_source_3(__, outcome_3):
      def sub_source_n(__, outcome_n):
        return dependent_term(
          outcome_1,
          outcome_2,
          outcome_3,
          outcome_n,
        )
      return source_n.substitute(sub_source_n)
    return source_3.substitute(sub_source_3)
  return source_2.substitute(sub_source_2)

print(f"%timeit resolve_dependent_probability({dependent_term.__name__}, outcome_1={source_1}, outcome_2={source_2}, outcome_3={source_3}, outcome_n={source_n})")
%timeit resolve_dependent_probability(dependent_term, outcome_1=source_1, outcome_2=source_2, outcome_3=source_3, outcome_n=source_n)
print()

print(f"%timeit {source_1}.substitute({sub_source_1.__name__})")
%timeit source_1.substitute(sub_source_1)
print()
